import datetime
import logging

import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode
from aiogram.utils import executor

from api.WeatherApi import getWeather
from entities.TempList import TempList
from states.NotesState import NotesState
from states.WeatherState import WeatherState

from keyboards import GREET_KEYBOARD, weather_start_message, notes_start_message, WEATHER_DATES, \
    WELCOME_KEYBOARD_NOTES, add_notes, list_notes

import matplotlib.pyplot as plt

logging.basicConfig(level=logging.INFO)

API_TOKEN = 'token'

bot = Bot(token=API_TOKEN)

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    markup = types.ReplyKeyboardRemove()

    await bot.send_message(

        message.chat.id,

        md.text(

            md.text('üëã –ü—Ä–∏–≤–µ—Ç!'),

            md.text(
                'üòé –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –¥–µ–ª–∞—Ö.'),

            md.text('üå°Ô∏è –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –¥–Ω–µ–π?', md.bold(
                '–ü—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏ –≥–æ—Ä–æ–¥ –∏ –¥–Ω–∏. –Ø –ø–æ—Å–æ–≤–µ—Ç—É—é —Ç–µ–±–µ –∫–∞–∫ –æ–¥–µ—Ç—å—Å—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±–æ–ª–µ—Ç—å'), '!'),

            md.text('üç∫ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –∑–∞–±—ã–≤–∞–µ—à—å —á—Ç–æ –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ?', md.bold(
                '–Ø –º–æ–≥—É —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏ –∏ —Ç—ã —Ç–æ—á–Ω–æ –Ω–µ –∑–∞–±—É–¥–µ—à—å –∫–∞–∫–æ–µ –ø–∏–≤–æ —Ç–µ–±—è –ø–æ–ø—Ä–æ—Å–∏–ª–∏ –∫—É–ø–∏—Ç—å –Ω–∞ —Å—É–±–±–æ—Ç–Ω—é—é –≤–µ—á–µ—Ä–∏–Ω–∫—É'),
                    '!'),

            md.text('ü§ü', md.bold('–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ, –ø–æ—ç—Ç–æ–º—É –Ω–µ –∑–∞–±–ª—É–¥–∏—à—å—Å—è'), '.',
                    md.bold('–£–¥–∞—á–∏, –¥—Ä—É–≥'), '!'),

            sep='\n\n',
        ),

        reply_markup=GREET_KEYBOARD(),
        parse_mode=ParseMode.MARKDOWN,
    )


@dp.message_handler(text=[weather_start_message, notes_start_message])
async def process_commands(message: types.Message):
    messageText = message.text

    if message.text == weather_start_message:
        await WeatherState.city.set()
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥", reply_markup=None)

    if message.text == notes_start_message:
        await NotesState.welcome.set()
        await message.reply("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ ", reply_markup=WELCOME_KEYBOARD_NOTES())


@dp.message_handler(state=WeatherState.city)
async def process_city(message: types.Message, state: FSMContext):
    messageText = message.text

    await state.update_data(city=messageText)
    await WeatherState.next()

    await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø–æ–≥–æ–¥—ã?", reply_markup=WEATHER_DATES())


@dp.message_handler(lambda message: not message.text.isdigit(), state=WeatherState.days)
async def process_days(message: types.Message):
    return await message.reply("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ, –¥—Ä—É–≥",reply_markup=WEATHER_DATES())


@dp.message_handler(lambda message: int(message.text) not in [1,2,4], state=WeatherState.days)
async def process_city(message: types.Message):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏—è, —Ä–∞–≤–Ω—ã–µ 1 / 2 / 4", reply_markup=WEATHER_DATES())


@dp.message_handler(lambda message: message.text.isdigit(), state=WeatherState.days)
async def process_city(message: types.Message, state: FSMContext):
    await state.update_data(days=int(message.text))

    weatherInfo = await state.get_data()

    res = await getWeather(weatherInfo.get('city'))

    tList = TempList(res['list'])

    if weatherInfo.get('days') == 1:
        date = tList.getFirstDate()

        await bot.send_message(
            message.chat.id,
            md.text(
                md.text(
                    f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç {date.temp}, –Ω–æ {date.description}, –ø–æ—ç—Ç–æ–º—É –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {date.feelsLike}"),
                sep='\n',
            ),
            reply_markup=GREET_KEYBOARD(),
            parse_mode=ParseMode.MARKDOWN,
        )
    else:
        datesList = None

        if weatherInfo.get('days') == 2:
            today = datetime.date.today()
            fromDate = today + datetime.timedelta(days=1)
            toDate = today + datetime.timedelta(days=2)
            datesList = tList.getRangeDates(fromDate, toDate)
        else:
            datesList = tList.omitTodayFromList()

        chartInfo = tList.plotData(datesList)

        ax = plt.axes()
        ax.set_xticklabels(chartInfo['labels'])
        plt.plot(chartInfo['x'], chartInfo['y'], color='black')

        plt.title("–î–∏–Ω–∞–º–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
        plt.xlabel("–î–Ω–∏")
        plt.ylabel("temp ¬∞C")

        plt.savefig('my_plot.png')

        await bot.send_photo(
            message.chat.id,
            photo=open("my_plot.png", 'rb'),
            reply_markup=GREET_KEYBOARD()
        )

    await state.finish()


@dp.message_handler(state=NotesState.welcome)
async def process_welcome(message: types.Message, state: FSMContext):
    if message.text == add_notes:
        await NotesState.add.set()
        await message.reply("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏", reply_markup=None)
    
    if message.text == list_notes:
        data = await state.get_data()
        dataList = data.get('notesList')

        if (dataList == None):
            return await message.answer(
                md.text(
                    md.text("–ó–∞–º–µ—Ç–∫–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã!"),
                    md.text("–¢—ã —á—Ç–æ –∫–æ–º–ø—å—é—Ç–µ—Ä, —á—Ç–æ –≤—Å–µ –ø–æ–º–Ω–∏—à—å? ü•∏ "),
                    sep="\n"
                ),
                reply_markup=WELCOME_KEYBOARD_NOTES(),
                parse_mode=ParseMode.MARKDOWN,
        )

        await NotesState.list.set()
        await message.reply("–î–µ—Ä–∂–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫")

        currentNoteIndex = data.get('currentNoteIndex')
        note = dataList[0]
        builder = types.InlineKeyboardMarkup(row_width=3)


        if (currentNoteIndex != 0):
            note = dataList[currentNoteIndex]

            builder.insert(types.InlineKeyboardButton(
                text="<<",
                callback_data="prev_note",
                )
            )

        builder.insert(types.InlineKeyboardButton(
            text="–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É",
            callback_data="remove_note",
            )
        )

        if (len(dataList) > 1):
            builder.insert(types.InlineKeyboardButton(
                text=">>",
                callback_data="next_note",
                )
            )

        await message.answer(
                md.text(
                    md.text(
                        note),
                    sep='\n',
                ),
                reply_markup=builder,
                parse_mode=ParseMode.MARKDOWN,
        )

    

@dp.message_handler(state=NotesState.add)
async def process_add_notes(message: types.Message, state: FSMContext):
    data = await state.get_data()
    dataList = data.get('notesList')
    if dataList is None:
       dataList = []
    dataList.append(message.text)

    await state.update_data(notesList=dataList)
    await message.reply(f"–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ '{message.text}'")
    await state.update_data(currentNoteIndex=0)
    await NotesState.welcome.set()

@dp.callback_query_handler(text="remove_note", state=NotesState.list)
async def handleNextNote(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    currentNoteIndex = data.get('currentNoteIndex')
    currentNotes = data.get('notesList')
    del currentNotes[currentNoteIndex]

    await state.update_data(notesList=currentNotes)

    await callback.message.answer("–£–¥–∞–ª–µ–Ω–æ!")
    await state.update_data(currentNoteIndex=0)
    await NotesState.welcome.set()


@dp.callback_query_handler(text="next_note", state=NotesState.list)
async def handleNextNote(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    currentNoteIndex = data.get('currentNoteIndex')
    await state.update_data(currentNoteIndex=currentNoteIndex+1)
   
    data = await state.get_data()
    dataList = data.get('notesList')
    currentNoteIndex = data.get('currentNoteIndex')
    note = dataList[currentNoteIndex]

    builder = types.InlineKeyboardMarkup(row_width=4)

    if (currentNoteIndex != 0):
        builder.insert(types.InlineKeyboardButton(
            text="<<",
            callback_data="prev_note",
            )
        )

    builder.insert(types.InlineKeyboardButton(
        text="–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É",
        callback_data="remove_note",
        )
    )

    if (len(dataList) > 1 and currentNoteIndex != len(dataList) - 1):
        builder.insert(types.InlineKeyboardButton(
            text=">>",
            callback_data="next_note",
            )
        )


    await callback.message.edit_text(
            md.text(
                md.text(
                    note),
                sep='\n',
            ),
            reply_markup=builder,
            parse_mode=ParseMode.MARKDOWN,
    )

@dp.callback_query_handler(text="prev_note", state=NotesState.list)
async def handleNextNote(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    currentNoteIndex = data.get('currentNoteIndex')
    await state.update_data(currentNoteIndex=currentNoteIndex-1)
   
    data = await state.get_data()
    dataList = data.get('notesList')
    currentNoteIndex = data.get('currentNoteIndex')

    note = dataList[currentNoteIndex]

    builder = types.InlineKeyboardMarkup(row_width=4)

    if (currentNoteIndex != 0):
        builder.insert(types.InlineKeyboardButton(
            text="<<",
            callback_data="prev_note",
            )
        )

    builder.insert(types.InlineKeyboardButton(
        text="–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É",
        callback_data="remove_note",
        )
    )

    if (len(dataList) > 1 and currentNoteIndex != len(dataList) - 1):
        builder.insert(types.InlineKeyboardButton(
            text=">>",
            callback_data="next_note",
            )
        )


    await callback.message.edit_text(
            md.text(
                md.text(
                    note),
                sep='\n',
            ),
            reply_markup=builder,
            parse_mode=ParseMode.MARKDOWN,
    )



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
