import logging


import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode, KeyboardButton, ReplyKeyboardMarkup
from aiogram.utils import executor

from keyboards import GREET_KEYBOARD, wheater_start_message, news_start_message, notes_start_message


logging.basicConfig(level=logging.INFO)


API_TOKEN = '5769100992:AAFybrewiL8qE7qZHTkJ8USUXx8Twn-CYtI'

bot = Bot(token=API_TOKEN)
# For example use simple MemoryStorage for Dispatcher.

storage = MemoryStorage()
dp = Dispatcher(bot)


# States
# class Form(StatesGroup):
#     name = State()  # Will be represented in storage as 'Form:name'
#     age = State()  # Will be represented in storage as 'Form:age'
#     gender = State()  # Will be represented in storage as 'Form:gender'


@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    markup = types.ReplyKeyboardRemove()

    await bot.send_message(

        message.chat.id,

        md.text(

            md.text('üëã –ü—Ä–∏–≤–µ—Ç!'),

            md.text(
                'üòé –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –¥–µ–ª–∞—Ö.'),

            md.text('üå°Ô∏è –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –¥–Ω–µ–π?', md.bold(
                '–ü—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏ –≥–æ—Ä–æ–¥ –∏ –¥–Ω–∏. –Ø –ø–æ—Å–æ–≤–µ—Ç—É—é —Ç–µ–±–µ –∫–∞–∫ –æ–¥–µ—Ç—å—Å—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±–æ–ª–µ—Ç—å'), '!'),

            md.text('üì∞ –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å –≤ –º–∏—Ä–µ –ø–æ–∫–∞ —Ç—ã —Å–ø–∞–ª?', md.bold(
                '–Ø –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏'), '!'),

            md.text('üç∫ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –∑–∞–±—ã–≤–∞–µ—à—å —á—Ç–æ –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ?', md.bold(
                '–Ø –º–æ–≥—É —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏ –∏ —Ç—ã —Ç–æ—á–Ω–æ –Ω–µ –∑–∞–±—É–¥–µ—à—å –∫–∞–∫–æ–µ –ø–∏–≤–æ —Ç–µ–±—è –ø–æ–ø—Ä–æ—Å–∏–ª–∏ –∫—É–ø–∏—Ç—å –Ω–∞ —Å—É–±–±–æ—Ç–Ω—é—é –≤–µ—á–µ—Ä–∏–Ω–∫—É'), '!'),

            md.text('ü§ü', md.bold('–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ, –ø–æ—ç—Ç–æ–º—É –Ω–µ –∑–∞–±–ª—É–¥–∏—à—å—Å—è'), '.', md.bold('–£–¥–∞—á–∏, –¥—Ä—É–≥'), '!'),

            sep='\n\n',

        ),

        reply_markup=GREET_KEYBOARD(),
        parse_mode=ParseMode.MARKDOWN,
    )

@dp.message_handler(commands=[wheater_start_message, news_start_message,notes_start_message])
async def process_commands(message: types.Message):
    print(message)
    return

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
